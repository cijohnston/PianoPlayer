package pianoplayer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;

/**
 *
 * @author cijohnston
 */
public class Piano extends javax.swing.JPanel {

    public Rectangle[] keys;
    private int keyPlayed1 = 100;
    private int keyPlayed2 = 100;
    private int keyPlayed3 = 100;
    private int keyPlayed4 = 100;
    private int keyPlayed5 = 100;
    private int keyPlayed6 = 100;

    /**
     * Creates new form JPanel
     */
    public Piano() {
        keys = new Rectangle[88];
        int whiteKeys = -1;
        int blackKeys = -1;
        for (int i = 0; i < 88; i++) {

            int d = i % 12;
            if (d != 1 && d != 4 && d != 6 && d != 9 && d != 11) {
                whiteKeys++;
                keys[i] = new Rectangle(300 + 55 * whiteKeys, 300, 50, 200);
            } else {

                blackKeys++;
                if (blackKeys % 7 == 1 || blackKeys % 7 == 4) {
                    blackKeys++;
                }
                keys[i] = new Rectangle(337 + 55 * blackKeys, 350, 30, 150);

            }

        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setKeyPlayed1(int keyPlayed) {
        this.keyPlayed1 = keyPlayed;
    }


    public void setKeyPlayed2(int keyPlayed2) {
        this.keyPlayed2 = keyPlayed2;
    }

    public void setKeyPlayed3(int keyPlayed3) {
        this.keyPlayed3 = keyPlayed3;
    }

    public void setKeyPlayed4(int keyPlayed4) {
        this.keyPlayed4 = keyPlayed4;
    }

    public void setKeyPlayed5(int keyPlayed5) {
        this.keyPlayed5 = keyPlayed5;
    }

    public void setKeyPlayed6(int keyPlayed6) {
        this.keyPlayed6 = keyPlayed6;
    }
    
    public void setKeys(Rectangle[] keys) {
        this.keys = keys;
    }
    

    public void paintComponent(Graphics g1) {
        System.out.println("painting...");

        // call constructor of JPanel   
        super.paintComponent(g1);

        // Graphics2D has more functions so let's use it.
        Graphics2D g = (Graphics2D) g1;
        // set the drawing pen to light blue
        g.setColor(new Color(150, 200, 255));
        // fill entire panel with a white rectangle
        g.fillRect(0, 0, this.getWidth(), this.getHeight());

        // These two lines flip image upside down so that (0,0) 
        // is at lower left corner of the panel
        g.scale(1, -1);
        g.translate(0, -this.getHeight());

        // create and draw the picture
        g.scale(.20, .20); // scales the whole picture

        g.setColor(Color.BLACK);
        g.fillOval(100, 800, 1700, 1700);
        g.fillOval(1800, 300, 1555, 1360);
        g.fillRect(100, 500, 3255, 480);
        g.fillRect(100, 500, 915, 1150);
        g.fillRect(1000, 500, 1500, 1000);

        int xPoints[] = {1760, 2600, 2600, 2300, 2200, 2100, 2000, 1900, 1850, 1800, 1750, 1700};
        int yPoints[] = {1500, 1500, 1660, 1700, 1715, 1737, 1770, 1815, 1855, 1910, 1970, 2050};
        g.fillPolygon(xPoints, yPoints, xPoints.length);

        g.setColor(new Color(150, 200, 255));
        g.fillRect(100, 100, 3660, 400);


        for (int i = 0; i < 88; i++) {

            int d = i % 12;
            if (d != 1 && d != 4 && d != 6 && d != 9 && d != 11) {
                g.setColor(Color.WHITE);
                if (i == keyPlayed1||i == keyPlayed2||i == keyPlayed3||
                        i == keyPlayed4||i == keyPlayed5||i == keyPlayed6) {
                    g.setColor(Color.BLUE);
                }
                g.fill(keys[i]);
            }
        }
        for (int i = 0; i < 88; i++) {
            int d = i % 12;
            if (d == 1 || d == 4 || d == 6 || d == 9 || d == 11) {
                g.setColor(Color.BLACK);
                if (i == keyPlayed1||i == keyPlayed2||i == keyPlayed3||
                        i == keyPlayed4||i == keyPlayed5||i == keyPlayed6) {
                    g.setColor(Color.BLUE);
                }
                g.fill(keys[i]);

            }

        }
        keyPlayed1=100;
        keyPlayed2=100;
        keyPlayed3=100;
        keyPlayed4=100;
        keyPlayed5=100;
        keyPlayed6=100;
        

      
        g.setColor(new Color(40, 40, 40));
        g.fillRect(300, 280, 55 * 52, 20);
        g.setColor(new Color(20, 20, 20));
        g.fillRect(130, 280, 170, 220);
        g.fillRect(300 + 55 * 52, 280, 170, 220);

        g.setColor(new Color(70, 70, 70));
        g.fillRect(127, 495, 340 + 55 * 52, 5);

        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
